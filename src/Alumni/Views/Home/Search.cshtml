@model Alumni.Models.UserViewModels.SearchViewModel
@using Microsoft.AspNetCore.Http
@{
    ViewData["Title"] = "Cautare";
}

@{ bool advSearch;}
<h4>Cautare</h4>

<div>
    <form asp-controller="Home" asp-action="Search" method="get">
        @if (@Context.User.IsInRole("Profesor") || @Context.User.IsInRole("Admin"))
        {
            advSearch = true;
            <input type="hidden" asp-for="@Model.isAdvancedSearch" value="@advSearch" />
        }
        else
        {
            advSearch = false;
            <input type="hidden" asp-for="@Model.isAdvancedSearch" value="@advSearch" />
        }
        <p>
            <input type="text" name="SearchString">
            <input type="submit" value="Cautati" />            
        </p>  
        @if(advSearch)
        {
            @Html.CheckBoxFor(m => m.isEducation) <b>Educatie</b>
            @Html.CheckBoxFor(m => m.isReference) <b>Referinta</b>
            @Html.CheckBoxFor(m => m.isSkill) <b>Cunostiinta</b>
            @Html.CheckBoxFor(m => m.isOrganization) <b>Organizatie</b>
            @Html.CheckBoxFor(m => m.isPublication) <b>Publicatie</b>
            @Html.CheckBoxFor(m => m.isLocation) <b>Locatie</b>
        }
        
    </form>
</div>
<div>
    @if (@Context.Session.GetString("SuccessfulSearch") == "Yes")
        {
        <h4>Rezultatele Cautarii</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.usersList[0].fName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.usersList[0].lName)
                            </th>                           
                            <th>
                                @Html.DisplayNameFor(model => model.usersList[0].Email)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.usersList[0].Telephone_Number)
                            </th>
                            <th>
                                Curriculum Vitae
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.usersList)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.fName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.lName)
                                </td>                                
                                <td>
                                    @Html.DisplayFor(modelItem => item.Email)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Telephone_Number)
                                </td>
                                <td>
                                    <a asp-controller="DBUsers" asp-action="Curriculum" asp-route-id="@item.UserID">CV</a>
                                </td>
                                <td>
                                    <a asp-controller="DBUsers" asp-action="Details" asp-route-id="@item.UserID">Detalii</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
    }
    else if (@Context.Session.GetString("SuccessfulSearch") == "No")
    {
        <div id="search-results">
            <h4>Rezultatele Cautarii</h4>
            <p>
                "Cautarea Dumneavoastra nu a produs nici un rezultat."
            </p>
        </div>
    }
</div>


@*<h2>Chat</h2>

<div class="divContainer">
    <div id="divChat" class="chatRoom">
        <div class="title">
            Welcome to Alumni Chat Room [<span id='spanUser'></span>]

        </div>
        <div class="content">            
            <div id="discussion" class="chatWindow">
            </div> 
            <div id="divusers" class="users">
            </div>           
        </div>
        <div class="messageBar">
            <input class="textbox" type="text" id="message" />
            <input id="sendmessage" type="button" value="Send" />
        </div>
    </div>

    <input id="hdId" type="hidden" />
    <input id="displayname" type="hidden" />
</div>
@section scripts {
    <!--Script references. -->
    <link rel="stylesheet" href="~/css/ChatStyle.css" />
    <link rel="stylesheet" href="~/css/JQueryUI/themes/base/jquery.ui.all.css" />
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->    
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <!--UI scripts -->
    <script src="~/lib/ui/jquery.ui.core.js"></script>
    <script src="~/lib/ui/jquery.ui.widget.js"></script>
    <script src="~/lib/ui/jquery.ui.mouse.js"></script>
    <script src="~/lib/ui/jquery.ui.draggable.js"></script>    
    <script src="~/lib/ui/jquery.ui.resizable.js"></script> 
     
    <!--Reference the SignalR library. -->
    <script src="~/lib/jquery/dist/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');               
            };

            // Function to display all the connected users to the newly connected user
            chat.client.onConnected = function (userId, connectionId, name, userList) {
                $('#hdId').val(userId);
                $('#spanUser').html(name);
                code = '';

                for (i = 0; i < userList.length; i++) {
                    code = $('<a id="' + userList[i].UserId + '" class="user" >' + userList[i].User.lName + ' ' + userList[i].User.fName + '</a>');
                    $("#divusers").append(code);
                }                
            }

            chat.client.onUserDisconnected = function (userId, userName, userList) {
                $('#' + userId).remove();

                var disc = $('<div class="disconnect">"' + userName + '" logged off.</div>');

                $(disc).hide();
                $('#divusers').prepend(disc);
                $(disc).fadeIn(200).delay(2000).fadeOut(200);

            }

            //Function to add the newly user to user list and inform other a new user is coneected
            chat.client.newUserConnected = function (userId, userName, userList) {
                code = $('<a id="' + userId + '" class="user" >' + userName + '</a>');
                $("#divusers").append(code);
            }
            

            chat.client.setChatWindow = function (groupName, connectTo, name) {
                var div = '<div id="' + groupName + '" class="ui-widget-content draggable" rel="0">' +
                        '<div class="header">' +
                            '<div  style="float:right;">' +
                                '<img id="imgDelete"  style="cursor:pointer;" src="/Images/delete.png"/>' +
                            '</div>' +

                            '<span class="selText" rel="0">' + name + '</span>' +
                            '<span class="selText" id="msgTypeingName" rel="0"></span>' +
                        '</div>' +
                        '<div id="divMessage" class="messageArea">' +

                        '</div>' +
                        '<div class="buttonBar">' +
                            '<input id="txtPrivateMessage" class="msgText" type="text"   />' +
                            '<input id="btnSendMessage" class="submitButton button" type="button" value="Send"   />' +
                        '</div>' +
                        '<div id="scrollLength"></div>' +
                    '</div>';

                var $div = $(div);

                // DELETE BUTTON IMAGE
                $div.find('#imgDelete').click(function () {
                    $('#' + groupName).remove();
                });

                // Send Button event
                $div.find("#btnSendMessage").click(function () {
                    $textBox = $div.find("#txtPrivateMessage");
                    var msg = $textBox.val();
                    if (msg.length > 0) {
                        chat.server.sendPrivateMessage(msg, groupName, $('#hdId').val(), connectTo);
                        $textBox.val('');
                    }
                });

                $div.find("#txtPrivateMessage").keyup(function (e) {
                    if (e.which == 13) {
                        $div.find("#btnSendMessage").click();
                    }
                });

                AddDivToContainer($div);

                $('#txtPrivateMessage').val('').focus();

            }

            chat.client.addMessage = function (message, groupName, fromUserId, toUser, name) {
                if ($('#' + groupName).length == 0) {
                    chat.client.setChatWindow(groupName, fromUserId, name);
                }
                    
                $('#' + groupName).find('#divMessage').append('<div class="message"><span class="userName">' + name + '</span>: ' + message + '</div>');
            }

            function AddDivToContainer($div) {
                $('.divContainer').prepend($div);
                $div.draggable({
                    handle: ".header"
                    //stop: function () {
                    //}
                });
            }

            // Get the user name and store it to prepend to messages.
            $('#displayname').val('@Context.Session.GetString("Prenume") @Context.Session.GetString("Nume")');

            // Set initial focus to message input box.
            $('#message').focus();

            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });

                $('.user').click(function () {
                    //if ($(this).hasClass('online')) {
                        chat.server.createGroup($('#hdId').val(), $(this).attr('id'));
                       // var chatWindow = $("#divChatWindow").clone(true);
                       // $(chatWindow).attr('chatToId', $(this).attr('data-userid'));
                       // $("#chatContainer").append(chatWindow);
                    //}
                    return false;
                });

                $("#message").keypress(function (e) {
                    if (e.which == 13) {
                        $('#sendmessage').click();
                    }
                });

            });
        });

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;            
        }
    </script>
}*@  

